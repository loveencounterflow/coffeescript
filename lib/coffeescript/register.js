// Generated by CoffeeScript 2.7.0
(function() {
  var CoffeeScript, Module, binary, cacheSourceMaps, child_process, ext, findExtension, fork, getRootModule, helpers, i, len, loadFile, nodeSourceMapsSupportEnabled, patchStackTrace, path, ref, ref1;

  CoffeeScript = require('./');

  child_process = require('child_process');

  helpers = require('./helpers');

  path = require('path');

  ({patchStackTrace} = CoffeeScript);

  // Check if Node's built-in source map stack trace transformations are enabled.
  nodeSourceMapsSupportEnabled = (typeof process !== "undefined" && process !== null) && (process.execArgv.includes('--enable-source-maps') || ((ref = process.env.NODE_OPTIONS) != null ? ref.includes('--enable-source-maps') : void 0));

  if (!(Error.prepareStackTrace || nodeSourceMapsSupportEnabled)) {
    cacheSourceMaps = true;
    patchStackTrace();
  }

  // Load and run a CoffeeScript file for Node, stripping any `BOM`s.
  loadFile = function(module, filename) {
    var js, options;
    options = module.options || getRootModule(module).options || {};
    // Currently `CoffeeScript.compile` caches all source maps if present. They
    // are available in `getSourceMap` retrieved by `filename`.
    if (cacheSourceMaps || nodeSourceMapsSupportEnabled) {
      options.inlineMap = true;
    }
    js = CoffeeScript._compileFile(filename, options);
    return module._compile(js, filename);
  };

  // If the installed version of Node supports `require.extensions`, register
  // CoffeeScript as an extension.
  if (require.extensions) {
    ref1 = CoffeeScript.FILE_EXTENSIONS;
    for (i = 0, len = ref1.length; i < len; i++) {
      ext = ref1[i];
      require.extensions[ext] = loadFile;
    }
    // Patch Node's module loader to be able to handle multi-dot extensions.
    // This is a horrible thing that should not be required.
    Module = require('module');
    findExtension = function(filename) {
      var curExtension, extensions;
      extensions = path.basename(filename).split('.');
      if (extensions[0] === '') {
        // Remove the initial dot from dotfiles.
        extensions.shift();
      }
      // Start with the longest possible extension and work our way shortwards.
      while (extensions.shift()) {
        curExtension = '.' + extensions.join('.');
        if (Module._extensions[curExtension]) {
          return curExtension;
        }
      }
      return '.js';
    };
    Module.prototype.load = function(filename) {
      var extension;
      this.filename = filename;
      this.paths = Module._nodeModulePaths(path.dirname(filename));
      extension = findExtension(filename);
      Module._extensions[extension](this, filename);
      return this.loaded = true;
    };
  }

  // If we're on Node, patch `child_process.fork` so that Coffee scripts are able
  // to fork both CoffeeScript files, and JavaScript files, directly.
  if (child_process) {
    ({fork} = child_process);
    binary = require.resolve('../../bin/coffee');
    child_process.fork = function(path, args, options) {
      if (helpers.isCoffee(path)) {
        if (!Array.isArray(args)) {
          options = args || {};
          args = [];
        }
        args = [path].concat(args);
        path = binary;
      }
      return fork(path, args, options);
    };
  }

  // Utility function to find the `options` object attached to the topmost module.
  getRootModule = function(module) {
    if (module.parent) {
      return getRootModule(module.parent);
    } else {
      return module;
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vIiwic291cmNlcyI6WyJzcmMvcmVnaXN0ZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUFBLE1BQUEsWUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsZUFBQSxFQUFBLGFBQUEsRUFBQSxHQUFBLEVBQUEsYUFBQSxFQUFBLElBQUEsRUFBQSxhQUFBLEVBQUEsT0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsUUFBQSxFQUFBLDRCQUFBLEVBQUEsZUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUE7O0VBQUEsWUFBQSxHQUFnQixPQUFBLENBQVEsSUFBUjs7RUFDaEIsYUFBQSxHQUFnQixPQUFBLENBQVEsZUFBUjs7RUFDaEIsT0FBQSxHQUFnQixPQUFBLENBQVEsV0FBUjs7RUFDaEIsSUFBQSxHQUFnQixPQUFBLENBQVEsTUFBUjs7RUFFaEIsQ0FBQSxDQUFDLGVBQUQsQ0FBQSxHQUFvQixZQUFwQixFQUxBOzs7RUFRQSw0QkFBQSxHQUErQixvREFBQSxJQUFhLENBQzFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBakIsQ0FBMEIsc0JBQTFCLENBQUEsbURBQ3dCLENBQUUsUUFBMUIsQ0FBbUMsc0JBQW5DLFdBRjBDOztFQUs1QyxNQUFPLEtBQUssQ0FBQyxpQkFBTixJQUEyQiw2QkFBbEM7SUFDRSxlQUFBLEdBQWtCO0lBQ2xCLGVBQUEsQ0FBQSxFQUZGO0dBYkE7OztFQWtCQSxRQUFBLEdBQVcsUUFBQSxDQUFDLE1BQUQsRUFBUyxRQUFULENBQUE7QUFDWCxRQUFBLEVBQUEsRUFBQTtJQUFFLE9BQUEsR0FBVSxNQUFNLENBQUMsT0FBUCxJQUFrQixhQUFBLENBQWMsTUFBZCxDQUFxQixDQUFDLE9BQXhDLElBQW1ELENBQUEsRUFBL0Q7OztJQUlFLElBQUcsZUFBQSxJQUFtQiw0QkFBdEI7TUFDRSxPQUFPLENBQUMsU0FBUixHQUFvQixLQUR0Qjs7SUFFQSxFQUFBLEdBQUssWUFBWSxDQUFDLFlBQWIsQ0FBMEIsUUFBMUIsRUFBb0MsT0FBcEM7V0FFTCxNQUFNLENBQUMsUUFBUCxDQUFnQixFQUFoQixFQUFvQixRQUFwQjtFQVRTLEVBbEJYOzs7O0VBK0JBLElBQUcsT0FBTyxDQUFDLFVBQVg7QUFDRTtJQUFBLEtBQUEsc0NBQUE7O01BQ0UsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFELENBQWxCLEdBQTBCO0lBRDVCLENBQUY7OztJQUtFLE1BQUEsR0FBUyxPQUFBLENBQVEsUUFBUjtJQUVULGFBQUEsR0FBZ0IsUUFBQSxDQUFDLFFBQUQsQ0FBQTtBQUNsQixVQUFBLFlBQUEsRUFBQTtNQUFJLFVBQUEsR0FBYSxJQUFJLENBQUMsUUFBTCxDQUFjLFFBQWQsQ0FBdUIsQ0FBQyxLQUF4QixDQUE4QixHQUE5QjtNQUViLElBQXNCLFVBQVUsQ0FBQyxDQUFELENBQVYsS0FBaUIsRUFBdkM7O1FBQUEsVUFBVSxDQUFDLEtBQVgsQ0FBQSxFQUFBO09BRko7O0FBSUksYUFBTSxVQUFVLENBQUMsS0FBWCxDQUFBLENBQU47UUFDRSxZQUFBLEdBQWUsR0FBQSxHQUFNLFVBQVUsQ0FBQyxJQUFYLENBQWdCLEdBQWhCO1FBQ3JCLElBQXVCLE1BQU0sQ0FBQyxXQUFXLENBQUMsWUFBRCxDQUF6QztBQUFBLGlCQUFPLGFBQVA7O01BRkY7YUFHQTtJQVJjO0lBVWhCLE1BQU0sQ0FBQSxTQUFFLENBQUEsSUFBUixHQUFlLFFBQUEsQ0FBQyxRQUFELENBQUE7QUFDakIsVUFBQTtNQUFJLElBQUMsQ0FBQSxRQUFELEdBQVk7TUFDWixJQUFDLENBQUEsS0FBRCxHQUFTLE1BQU0sQ0FBQyxnQkFBUCxDQUF3QixJQUFJLENBQUMsT0FBTCxDQUFhLFFBQWIsQ0FBeEI7TUFDVCxTQUFBLEdBQVksYUFBQSxDQUFjLFFBQWQ7TUFDWixNQUFNLENBQUMsV0FBVyxDQUFDLFNBQUQsQ0FBbEIsQ0FBOEIsSUFBOUIsRUFBb0MsUUFBcEM7YUFDQSxJQUFDLENBQUEsTUFBRCxHQUFVO0lBTEcsRUFsQmpCO0dBL0JBOzs7O0VBMERBLElBQUcsYUFBSDtJQUNFLENBQUEsQ0FBQyxJQUFELENBQUEsR0FBUyxhQUFUO0lBQ0EsTUFBQSxHQUFTLE9BQU8sQ0FBQyxPQUFSLENBQWdCLGtCQUFoQjtJQUNULGFBQWEsQ0FBQyxJQUFkLEdBQXFCLFFBQUEsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLE9BQWIsQ0FBQTtNQUNuQixJQUFHLE9BQU8sQ0FBQyxRQUFSLENBQWlCLElBQWpCLENBQUg7UUFDRSxLQUFPLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBZCxDQUFQO1VBQ0UsT0FBQSxHQUFVLElBQUEsSUFBUSxDQUFBO1VBQ2xCLElBQUEsR0FBTyxHQUZUOztRQUdBLElBQUEsR0FBTyxDQUFDLElBQUQsQ0FBTSxDQUFDLE1BQVAsQ0FBYyxJQUFkO1FBQ1AsSUFBQSxHQUFPLE9BTFQ7O2FBTUEsSUFBQSxDQUFLLElBQUwsRUFBVyxJQUFYLEVBQWlCLE9BQWpCO0lBUG1CLEVBSHZCO0dBMURBOzs7RUF1RUEsYUFBQSxHQUFnQixRQUFBLENBQUMsTUFBRCxDQUFBO0lBQ2QsSUFBRyxNQUFNLENBQUMsTUFBVjthQUFzQixhQUFBLENBQWMsTUFBTSxDQUFDLE1BQXJCLEVBQXRCO0tBQUEsTUFBQTthQUF1RCxPQUF2RDs7RUFEYztBQXZFaEIiLCJzb3VyY2VzQ29udGVudCI6WyJDb2ZmZWVTY3JpcHQgID0gcmVxdWlyZSAnLi8nXG5jaGlsZF9wcm9jZXNzID0gcmVxdWlyZSAnY2hpbGRfcHJvY2VzcydcbmhlbHBlcnMgICAgICAgPSByZXF1aXJlICcuL2hlbHBlcnMnXG5wYXRoICAgICAgICAgID0gcmVxdWlyZSAncGF0aCdcblxue3BhdGNoU3RhY2tUcmFjZX0gPSBDb2ZmZWVTY3JpcHRcblxuIyBDaGVjayBpZiBOb2RlJ3MgYnVpbHQtaW4gc291cmNlIG1hcCBzdGFjayB0cmFjZSB0cmFuc2Zvcm1hdGlvbnMgYXJlIGVuYWJsZWQuXG5ub2RlU291cmNlTWFwc1N1cHBvcnRFbmFibGVkID0gcHJvY2Vzcz8gYW5kIChcbiAgcHJvY2Vzcy5leGVjQXJndi5pbmNsdWRlcygnLS1lbmFibGUtc291cmNlLW1hcHMnKSBvclxuICBwcm9jZXNzLmVudi5OT0RFX09QVElPTlM/LmluY2x1ZGVzKCctLWVuYWJsZS1zb3VyY2UtbWFwcycpXG4pXG5cbnVubGVzcyBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSBvciBub2RlU291cmNlTWFwc1N1cHBvcnRFbmFibGVkXG4gIGNhY2hlU291cmNlTWFwcyA9IHRydWVcbiAgcGF0Y2hTdGFja1RyYWNlKClcblxuIyBMb2FkIGFuZCBydW4gYSBDb2ZmZWVTY3JpcHQgZmlsZSBmb3IgTm9kZSwgc3RyaXBwaW5nIGFueSBgQk9NYHMuXG5sb2FkRmlsZSA9IChtb2R1bGUsIGZpbGVuYW1lKSAtPlxuICBvcHRpb25zID0gbW9kdWxlLm9wdGlvbnMgb3IgZ2V0Um9vdE1vZHVsZShtb2R1bGUpLm9wdGlvbnMgb3Ige31cblxuICAjIEN1cnJlbnRseSBgQ29mZmVlU2NyaXB0LmNvbXBpbGVgIGNhY2hlcyBhbGwgc291cmNlIG1hcHMgaWYgcHJlc2VudC4gVGhleVxuICAjIGFyZSBhdmFpbGFibGUgaW4gYGdldFNvdXJjZU1hcGAgcmV0cmlldmVkIGJ5IGBmaWxlbmFtZWAuXG4gIGlmIGNhY2hlU291cmNlTWFwcyBvciBub2RlU291cmNlTWFwc1N1cHBvcnRFbmFibGVkXG4gICAgb3B0aW9ucy5pbmxpbmVNYXAgPSB0cnVlXG4gIGpzID0gQ29mZmVlU2NyaXB0Ll9jb21waWxlRmlsZSBmaWxlbmFtZSwgb3B0aW9uc1xuXG4gIG1vZHVsZS5fY29tcGlsZSBqcywgZmlsZW5hbWVcblxuIyBJZiB0aGUgaW5zdGFsbGVkIHZlcnNpb24gb2YgTm9kZSBzdXBwb3J0cyBgcmVxdWlyZS5leHRlbnNpb25zYCwgcmVnaXN0ZXJcbiMgQ29mZmVlU2NyaXB0IGFzIGFuIGV4dGVuc2lvbi5cbmlmIHJlcXVpcmUuZXh0ZW5zaW9uc1xuICBmb3IgZXh0IGluIENvZmZlZVNjcmlwdC5GSUxFX0VYVEVOU0lPTlNcbiAgICByZXF1aXJlLmV4dGVuc2lvbnNbZXh0XSA9IGxvYWRGaWxlXG5cbiAgIyBQYXRjaCBOb2RlJ3MgbW9kdWxlIGxvYWRlciB0byBiZSBhYmxlIHRvIGhhbmRsZSBtdWx0aS1kb3QgZXh0ZW5zaW9ucy5cbiAgIyBUaGlzIGlzIGEgaG9ycmlibGUgdGhpbmcgdGhhdCBzaG91bGQgbm90IGJlIHJlcXVpcmVkLlxuICBNb2R1bGUgPSByZXF1aXJlICdtb2R1bGUnXG5cbiAgZmluZEV4dGVuc2lvbiA9IChmaWxlbmFtZSkgLT5cbiAgICBleHRlbnNpb25zID0gcGF0aC5iYXNlbmFtZShmaWxlbmFtZSkuc3BsaXQgJy4nXG4gICAgIyBSZW1vdmUgdGhlIGluaXRpYWwgZG90IGZyb20gZG90ZmlsZXMuXG4gICAgZXh0ZW5zaW9ucy5zaGlmdCgpIGlmIGV4dGVuc2lvbnNbMF0gaXMgJydcbiAgICAjIFN0YXJ0IHdpdGggdGhlIGxvbmdlc3QgcG9zc2libGUgZXh0ZW5zaW9uIGFuZCB3b3JrIG91ciB3YXkgc2hvcnR3YXJkcy5cbiAgICB3aGlsZSBleHRlbnNpb25zLnNoaWZ0KClcbiAgICAgIGN1ckV4dGVuc2lvbiA9ICcuJyArIGV4dGVuc2lvbnMuam9pbiAnLidcbiAgICAgIHJldHVybiBjdXJFeHRlbnNpb24gaWYgTW9kdWxlLl9leHRlbnNpb25zW2N1ckV4dGVuc2lvbl1cbiAgICAnLmpzJ1xuXG4gIE1vZHVsZTo6bG9hZCA9IChmaWxlbmFtZSkgLT5cbiAgICBAZmlsZW5hbWUgPSBmaWxlbmFtZVxuICAgIEBwYXRocyA9IE1vZHVsZS5fbm9kZU1vZHVsZVBhdGhzIHBhdGguZGlybmFtZSBmaWxlbmFtZVxuICAgIGV4dGVuc2lvbiA9IGZpbmRFeHRlbnNpb24gZmlsZW5hbWVcbiAgICBNb2R1bGUuX2V4dGVuc2lvbnNbZXh0ZW5zaW9uXSh0aGlzLCBmaWxlbmFtZSlcbiAgICBAbG9hZGVkID0gdHJ1ZVxuXG4jIElmIHdlJ3JlIG9uIE5vZGUsIHBhdGNoIGBjaGlsZF9wcm9jZXNzLmZvcmtgIHNvIHRoYXQgQ29mZmVlIHNjcmlwdHMgYXJlIGFibGVcbiMgdG8gZm9yayBib3RoIENvZmZlZVNjcmlwdCBmaWxlcywgYW5kIEphdmFTY3JpcHQgZmlsZXMsIGRpcmVjdGx5LlxuaWYgY2hpbGRfcHJvY2Vzc1xuICB7Zm9ya30gPSBjaGlsZF9wcm9jZXNzXG4gIGJpbmFyeSA9IHJlcXVpcmUucmVzb2x2ZSAnLi4vLi4vYmluL2NvZmZlZSdcbiAgY2hpbGRfcHJvY2Vzcy5mb3JrID0gKHBhdGgsIGFyZ3MsIG9wdGlvbnMpIC0+XG4gICAgaWYgaGVscGVycy5pc0NvZmZlZSBwYXRoXG4gICAgICB1bmxlc3MgQXJyYXkuaXNBcnJheSBhcmdzXG4gICAgICAgIG9wdGlvbnMgPSBhcmdzIG9yIHt9XG4gICAgICAgIGFyZ3MgPSBbXVxuICAgICAgYXJncyA9IFtwYXRoXS5jb25jYXQgYXJnc1xuICAgICAgcGF0aCA9IGJpbmFyeVxuICAgIGZvcmsgcGF0aCwgYXJncywgb3B0aW9uc1xuXG4jIFV0aWxpdHkgZnVuY3Rpb24gdG8gZmluZCB0aGUgYG9wdGlvbnNgIG9iamVjdCBhdHRhY2hlZCB0byB0aGUgdG9wbW9zdCBtb2R1bGUuXG5nZXRSb290TW9kdWxlID0gKG1vZHVsZSkgLT5cbiAgaWYgbW9kdWxlLnBhcmVudCB0aGVuIGdldFJvb3RNb2R1bGUgbW9kdWxlLnBhcmVudCBlbHNlIG1vZHVsZVxuIl19
//# sourceURL=/home/flow/jzr/coffeescript/src/register.coffee